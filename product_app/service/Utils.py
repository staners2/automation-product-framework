import calendar
import json
import logging
import re

from datetime import datetime, timedelta, date
from pathlib import Path
from typing import List, Optional

import pystache
from dateutil.relativedelta import relativedelta
from dotenv import load_dotenv

from Months import Months
from core import JiraServices, Telegram
from core.GoogleSheetsServices import GoogleSheetsServices, google_services
from core.Sauron import sauron
from models.Employee import Employee
from models.Event import Event
from models.EventType import EventType
from models.JiraIssue import JiraIssue
from models.NotifyDaily import NotifyDaily
from models.Product import Product

load_dotenv()


def get_event_type_by_title(events: List[EventType], title: str) -> Optional[EventType]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ '—Å–æ–±—ã—Ç–∏–µ' –ø–æ –µ–≥–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é
    :param events: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
    :param title: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    :return: –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è
    """
    for event in events:
        if event.title == title:
            return event
    return None


def calculation_point_on_event(
    products: List[Product],
    event_types: List[EventType],
    date_start: date,
    date_end: date,
):
    """
    –†–∞—Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤ –ø–æ —Å–æ–±—ã—Ç–∏—è–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç.
    (–í —Å—Ç–æ–ª–±—Ü–µ –¥–∞—Ç–∞ —Å–æ–±—ã—Ç–∏–π –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã)
    :param products: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    :param event_types: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
    :param date_start: –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞
    :param date_end: –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    :return: None
    """
    for product in products:
        logging.debug(f"Start calculation point on product: {product.product_name}")
        events: List[Event] = []
        sheet = google_services.open_sheet(product.product_name)
        rows = sheet.get_all_values()
        for event_title in EventType.TYPES.get_list_items():

            start_index_row, col = google_services.get_first_cell_event(
                sheet, rows, event_title, Months[date_end.month]
            )
            for row_index in range(start_index_row, len(rows)):
                if not re.fullmatch("\d{1,2}[.,-]\d{1,2}[.,-]\d\d\d\d", rows[row_index][col]):
                    break
                date_event = datetime.strptime(rows[row_index][col], "%d.%m.%Y").date()
                logging.debug(f"Date event: {date_event} | cell[{row_index}][{col}]")
                if date_start <= date_event <= date_end:
                    description = rows[row_index][col + 2]
                    event_type: EventType = get_event_type_by_title(event_types, event_title)
                    events.append(
                        Event(
                            date_field=date_event,
                            event_type=event_type,
                            description=description,
                        )
                    )

        for event in events:
            if event.event_type.title == EventType.TYPES.EVENT_DAILY_TITLE.value:
                product.fact_event_daily += float(event.event_type.point)

            elif event.event_type.title == EventType.TYPES.EVENT_CLOSE_TASK_TITLE.value:
                product.fact_event_close_task += int(event.event_type.point)

            elif event.event_type.title == EventType.TYPES.EVENT_REVIEW_CODE_TITLE.value:
                product.fact_event_review_code += int(event.event_type.point)

            elif event.event_type.title == EventType.TYPES.EVENT_ONE_TO_ONE_TITLE.value:
                product.fact_event_one_to_one += int(event.event_type.point)

            elif event.event_type.title == EventType.TYPES.EVENT_INDIVIDUAL_PLAN_TITLE.value:
                product.fact_event_individual_plan += int(event.event_type.point)

            elif event.event_type.title == EventType.TYPES.EVENT_MEETING_ON_PRODUCT_TITLE.value:
                product.fact_event_meeting_on_product += int(event.event_type.point)

            logging.debug(
                f"\n{event.date_field.strftime('%d.%m.%Y')} | {event.event_type.title} | +{event.event_type.point} point\n"
                f"{event.description[0:75]}"
            )

        logging.debug(
            f"""
            <==== {product.product_name} ====>
            {EventType.TYPES.EVENT_DAILY_TITLE.value}: {product.fact_event_daily}
            {EventType.TYPES.EVENT_REVIEW_CODE_TITLE.value}: {product.fact_event_review_code}
            {EventType.TYPES.EVENT_ONE_TO_ONE_TITLE.value}: {product.fact_event_one_to_one}
            {EventType.TYPES.EVENT_INDIVIDUAL_PLAN_TITLE.value}: {product.fact_event_individual_plan}
            {EventType.TYPES.EVENT_MEETING_ON_PRODUCT_TITLE.value}: {product.fact_event_meeting_on_product}
            {EventType.TYPES.EVENT_CLOSE_TASK_TITLE.value}: {product.fact_event_close_task}
        """
        )


def calculation_plan_point_all_product(products: List[Product], event_types: List[EventType], first_day_month: date):
    """
    –ü–æ–¥—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ –ø–ª–∞–Ω–∞ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º
    :param first_day_month: –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    :param products: —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    :param event_types: —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
    :return: None
    """
    for product in products:
        product.calculation_plan_point(first_day_month, event_types)


def get_count_all_worked_days(month: int, year: int) -> int:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é –∫–æ–ª-–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –∑–∞ –º–µ—Å—è—Ü
    :param month: –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞
    :param year: –Ω–æ–º–µ—Ä –≥–æ–¥–∞
    :return: –∫–æ–ª-–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
    """
    file = Path(f"{year}.json")
    data = json.loads(file.read_text())
    date_start = datetime.strptime(f"{year}-{month}-1", "%Y-%m-%d")
    date_end = date_start + relativedelta(months=1)

    worked_days = 0
    while date_start <= date_end:
        if data[f"{date_start.strftime('%Y-%m-%d')}"] != 0:
            worked_days += 1
        date_start += timedelta(days=1)

    return worked_days


def sending_notify_week(
    products: List[Product],
    event_types: List[EventType],
    date_start: date,
    date_end: date,
):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ–± –∏—Ç–æ–≥–∞—Ö –∑–∞ –Ω–µ–¥–µ–ª—é
    :param products: —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    :param event_types: —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
    :param date_start: –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    :param date_end: –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    :return:
    """
    logging.debug("Sending notify week")

    date_start_s = date_start.strftime("%d-%m")
    date_end_s = date_end.strftime("%d-%m")

    year = datetime.now().strftime("%Y")
    month = datetime.now().strftime("%m")

    # TODO –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å —á—Ç–æ–±—ã –±—Ä–∞–ª –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã, –∞ –Ω–µ –∑–∞–Ω–æ–≤–æ —Å—á–∏—Ç–∞–ª ???
    calculation_point_on_event(products, event_types, date_start, date_end)
    google_services.get_plan_on_products(products, GoogleSheetsServices.SHEETS_TITLE.PLAN.value, date_end)

    for product in products:
        logging.debug(f"{product.product_name} | prepare data")
        fact = product.get_all_fact_point()
        plan = product.get_all_plan_point()
        try:
            percent = float(fact / plan * 100).__format__(".2f")
        except ZeroDivisionError:
            logging.debug(f"{fact} / {plan} => ZeroDivisionError")
            percent = 0
        data = {
            "product": {"product_name": product.product_name},
            "date_start": date_start_s,
            "date_end": date_end_s,
            "point": {
                "total_plan_point": product.get_all_plan_point().__format__(".2f"),
                "percent": percent,
                "total_fact_point": product.get_all_fact_point().__format__(".2f"),
                "result": "‚úÖ" if product.get_all_plan_point() <= product.get_all_fact_point() else "üßê",
            },
            "daily": {
                "result": "‚úÖ" if product.plan_event_daily <= product.fact_event_daily else "",
                "plan": product.plan_event_daily.__format__(".2f"),
                "fact": product.fact_event_daily.__format__(".2f"),
            },
            "review_code": {
                "result": "‚úÖ" if product.plan_event_review_code <= product.fact_event_review_code else "",
                "plan": product.plan_event_review_code.__format__(".2f"),
                "fact": product.fact_event_review_code.__format__(".2f"),
            },
            "one_to_one": {
                "result": "‚úÖ" if product.plan_event_one_to_one <= product.fact_event_one_to_one else "",
                "plan": product.plan_event_one_to_one.__format__(".2f"),
                "fact": product.fact_event_one_to_one.__format__(".2f"),
            },
            "close_task": {
                "result": "‚úÖ" if product.plan_event_close_task <= product.fact_event_close_task else "",
                "plan": product.plan_event_close_task.__format__(".2f"),
                "fact": product.fact_event_close_task.__format__(".2f"),
            },
            "individual_plan": {
                "result": "‚úÖ" if product.plan_event_individual_plan <= product.fact_event_individual_plan else "",
                "plan": product.plan_event_individual_plan.__format__(".2f"),
                "fact": product.fact_event_individual_plan.__format__(".2f"),
            },
            "meeting_product": {
                "result": "‚úÖ" if product.plan_event_meeting_on_product <= product.fact_event_meeting_on_product else "",
                "plan": product.plan_event_meeting_on_product.__format__(".2f"),
                "fact": product.fact_event_meeting_on_product.__format__(".2f"),
            },
        }

        reader = Path("./Template/week_report.mustache").read_text("utf-8")
        render = pystache.render(reader, data)
        logging.info(f"Sending message in {product.product_name} chat | {product.chatid_telegram}")
        for chatId in product.chatid_telegram:
            Telegram.send_message(render, chatId)


def sending_notify_month(products: List[Product], date_start: date):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞, –æ–± –∏—Ç–æ–≥–∞—Ö –∑–∞ –≤–µ—Å—å –º–µ—Å—è—Ü
    :param products: —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    :param date_start: –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    :return: None
    """
    logging.debug("Sending notify month")

    month_title = Months[date_start.month]

    sheet = google_services.open_sheet(GoogleSheetsServices.SHEETS_TITLE.REPORT.value)
    all_column = sheet.get_row(2)
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞–π–Ω–µ–π —è—á–µ–π–∫–∏ –°—É–º–º–∞ —Ñ–∞–∫—Ç–∞
    index_column = len([i for i in all_column if i != ""]) - 2
    index_row = 3

    data = {"date": month_title, "products": []}
    for product in products:
        fact_sum = float(sheet.cell((index_row, index_column)).value.replace(",", "."))
        plan_sum = float(sheet.cell((index_row, index_column + 1)).value.replace(",", "."))
        procent = float(sheet.cell((index_row, index_column + 2)).value.replace(",", "."))

        data["products"].append(
            {
                "product_name": product.product_name,
                "fact": fact_sum,
                "plan": plan_sum,
                "procent": f"{procent}",
                "result": "‚úÖ" if float(procent) >= 100 else "üö´",
            }
        )

        index_row += 1

    reader = Path("./Template/month_report.mustache").read_text("utf-8")
    render = pystache.render(reader, data)
    print(data)
    Telegram.send_message(render, "623018988")  # id —á–∞—Ç–∞ –ï–ª–∏–∑–∞–≤–µ—Ç—ã –ü–æ–ª–µ—Ç–∞–µ–≤–æ–π —Å Tixon
    print(render)


def get_count_week(date_end: date) -> int:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª-–≤–æ –Ω–µ–¥–µ–ª—å –≤ –º–µ—Å—è—Ü–µ
    :param date_end: –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è –≤ –º–µ—Å—è—Ü–µ
    :return: –∫–æ–ª-–≤–æ –Ω–µ–¥–µ–ª—å
    """
    date_start = datetime.strptime(f"{date_end.year}-{date_end.month}-1", "%Y-%m-%d")
    count = 0
    while date_start.month == date_end.month:
        if date_start.weekday() == 6:
            count += 1
        date_start += timedelta(1)
    if (date_start - timedelta(1)).weekday() != 6:
        count += 1

    return count


def get_count_friday(date_first_day_month: date) -> int:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ –ø—è—Ç–Ω–∏—Ü –≤ –º–µ—Å—è—Ü–µ
    :param date_first_day_month: –¥–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞
    :return:
    """
    date = datetime.strptime(f"{date_first_day_month.year}-{date_first_day_month.month}-1", "%Y-%m-%d")
    count = 0
    while date.month == date_first_day_month.month:
        if date.weekday() == 4:  # –ø—è—Ç–Ω–∏—Ü–∞
            count += 1
        date += timedelta(1)

    return count


def get_count_week_for_review_code(date_first_day: date) -> int:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª-–≤–æ –Ω–µ–¥–µ–ª—å –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ (>= 4 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è)
    :param date_first_day: –¥–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞
    :return: –∫–æ–ª-–≤–æ –Ω–µ–¥–µ–ª—å
    """
    date_start = date_first_day
    date_start += timedelta(1)
    count_week = 0
    temp_day = 0
    while date_start.month == date_first_day.month:
        if date_start.weekday() != 5 | 6:
            if date_start.weekday() == 0:
                temp_day = 1
            if temp_day == 4:
                count_week += 1
            temp_day += 1

        date_start += timedelta(1)

    return count_week


def is_close_task_created(product: Product, date: date) -> bool:
    """
    –ë—ã–ª–∞ –ª–∏ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ '–ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–¥–∞—á' –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ
    :param product: –ü—Ä–æ–¥—É–∫—Ç
    :param date: –î–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
    :return: –°–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ –Ω–µ—Ç
    """

    date_range = get_start_and_end_week(date)
    # –í—Å—è –Ω–µ–¥–µ–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö
    if date_range is None:
        return True

    a = date_range[0].strftime("%Y-%m-%d")  # –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    b = date_range[-1].strftime("%Y-%m-%d")  # –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    query = (
        f"project = {product.base_workspace} AND assignee in ('{product.get_product_manager().login}') "
        r"AND summary ~ '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–¥–∞—á' "
        f"AND created >= {a}"
    )

    issues: List[JiraIssue] = JiraServices.get_issue_on_jql(query)

    if len(issues) > 0:
        logging.info(f"–ó–∞–¥–∞—á–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {product.product_name}")
        return True
    logging.info(f"–ó–∞–¥–∞—á–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–ª—è {product.product_name}")
    return False


def get_start_and_end_week(date: date) -> [datetime]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
    :return:
    - –ï—Å–ª–∏ –≤—Å—è –Ω–µ–¥–µ–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö, —Ç–æ –≤–æ–∑–≤—Ä–∞—Ç None
    - –°–ø–∏—Å–æ–∫ –¥–∞—Ç
    """
    a = date - timedelta(date.weekday())  # –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    b = date + timedelta(6 - date.weekday())  # –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏

    # –æ–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ —Ö–æ—Ä–æ—à–æ, –Ω—É–∂–Ω–æ –¥–æ 1 —á–∏—Å–ª–∞ –∏ –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª—è—Ç—å
    if a.month != b.month:
        # –∫ –ª–µ–≤–æ–π –≥—Ä–∞–Ω–∏—Ü–µ –±–ª–∏–∂–µ
        if date.month == a.month:
            b = datetime.strptime(
                f"{b.year}-{a.month}-{calendar.monthrange(a.year, a.month)[1]}",
                "%Y-%m-%d",
            ).date()
        # –∫ –ª–µ–≤–æ–π –≥—Ä–∞–Ω–∏—Ü–µ –±–ª–∏–∂–µ
        else:
            a += timedelta(datetime.strptime(f"{b.year}-{b.month}-1", "%Y-%m-%d").weekday() - a.weekday())

    a -= timedelta(1)
    res = []
    while a < b:
        a = a + timedelta(1)
        year = a.year
        worked_calendar = json.loads(Path(f"{year}.json").read_text())
        if worked_calendar[f"{year}-{a.strftime('%m-%d')}"] != 0:
            res.append(a)

    if len(res) == 0:
        return None

    return res


def close_header_issue_daily(products: [Product]):
    """
    –ó–∞–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω—É—é –∑–∞–¥–∞—á—É –Ω–∞ —Å–æ–±—ã—Ç–∏–µ '–î–µ–π–ª–∏'
    :param products: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    :return:
    """

    def task_is_closed(keys: [str]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã –ª–∏ –≤—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏
        :param keys: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –ø–æ–¥–∑–∞–¥–∞—á
        :return: –í—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω—ã/–∑–∞–∫—Ä—ã—Ç—ã?
        """
        for key in keys:
            issue: JiraIssue = JiraServices.get_info_issue(key)
            if issue.fields.timespent is not None:
                if issue.fields.status.name != "–ò—Å–ø–æ–ª–Ω–µ–Ω–∞":
                    return False
        return True

    def transition_issue(issue: JiraIssue):
        """
        –°–¥–≤–∏–≥ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –¥–æ —Å—Ç–∞—Ç—É—Å–∞ '–ò—Å–ø–æ–ª–Ω–µ–Ω–æ'
            - 111 - –í —Ä–∞–±–æ—Ç—É
            - 121 - –†–µ—à–µ–Ω–æ
            - 131 - –û—Ç–º–µ–Ω–µ–Ω–æ
        :param issue: –∑–∞–¥–∞—á–∞
        :return:
        """
        old_assignee = issue.fields.assignee.name
        logging.debug(f"Old assignee: {old_assignee}")
        JiraServices.update_assignee(issue, "jenkins.ci")
        JiraServices.transition_issue(issue, 121)
        JiraServices.update_assignee(issue, old_assignee)

    date = datetime.now().date()
    date_range = get_start_and_end_week(date)
    # –ù–µ–¥–µ–ª—è —Ä–∞–±–æ—á–∞—è
    if date_range is not None:
        # –ü–µ—Ä–≤—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
        first_date = date_range[0]
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –Ω–∞ –Ω–µ–¥–µ–ª–µ
        last_date = date_range[-1]

        for product in products:
            # –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –ó–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É
            if product.product_name == "–ó–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É":
                jql_issue = (
                    f"project = '{product.base_workspace}' AND "
                    f"summary ~ '–°–æ–≤–µ—â–∞–Ω–∏–µ: Daily-–º–∏—Ç–∏–Ω–≥. {first_date.strftime('%d')}.{first_date.strftime('%m')} - "
                    f"{last_date.strftime('%d')}.{last_date.strftime('%m')} / {product.product_name}' "
                    "AND type = –°–æ–≤–µ—â–∞–Ω–∏–µ"
                )
                try:
                    header_issue: JiraIssue = JiraServices.get_issue_on_jql(jql_issue)[0]
                except Exception as er:
                    logging.debug(f"–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –≥–ª–∞–≤–Ω—É—é –∑–∞–¥–∞—á—É –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É {product.product_name} | {er}")
                    continue

                keys = [item.key for item in header_issue.fields.subtasks]
                if task_is_closed(keys):
                    transition_issue(header_issue)


def send_message_created_issue_daily(product: Product, key: str, date_start: date, date_end: date):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –≥–ª–∞–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
    :param product: –ø—Ä–æ–¥—É–∫—Ç
    :param key: –∫–ª—é—á —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
    :param date_start: –¥–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
    :param date_end: –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
    :return:
    """
    message = (
        f"<b>–ü—Ä–æ–¥—É–∫—Ç:</b> {product.product_name}\n<b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> {product.get_product_manager().name}\n\n"
        f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –¥–µ–π–ª–∏ —Å {date_start.strftime('%Y-%m-%d')} –ø–æ {date_end.strftime('%Y-%m-%d')}!\n\n"
        f'<b><a href="{JiraServices.BASE_URL}/browse/{key}"> ‚û§‚û§‚û§ –ó–∞–¥–∞—á–∞ ‚û§‚û§‚û§ </a></b>'
    )
    for chat_id in product.chatid_telegram:
        Telegram.send_message(message, chat_id)


def send_message_created_subissue_daily(product: Product, notify_list: [NotifyDaily], date: date):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∑–∞–¥–∞—á–∞—Ö
    :param product: –ø—Ä–æ–¥—É–∫—Ç
    :param notify_list: —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    :param date: –¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
    :return:
    """
    message = f"<b>–ü—Ä–æ–¥—É–∫—Ç:</b> {product.product_name}\n–°–æ–∑–¥–∞–Ω—ã –ø–æ–¥–∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –¥–µ–π–ª–∏ –Ω–∞ {date.strftime('%Y-%m-%d')}!\n\n"

    for item in notify_list:
        message += f"<b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> {item.login} {item.message}"

    for chat_id in product.chatid_telegram:
        Telegram.send_message(message, chat_id)


def is_holiday() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫
    :return:
    """
    date = datetime.now()
    data = json.loads(Path(f"{date.strftime('%Y')}.json").read_text())

    try:
        if data[f"{date.strftime('%Y-%m-%d')}"] == 0:
            logging.debug(f"Date is holiday: {date.strftime('%Y-%m-%d')}")
            return True
    except:
        logging.debug(f"Date is not holiday: {date.strftime('%Y-%m-%d')}")
        return False


def actualization_worked_employee_on_week(employee: Employee) -> bool:
    date = datetime.now()
    date_start = date - timedelta(date.weekday())
    date_end = date_start + timedelta(6)

    if employee.isLeader:
        # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
        logging.debug(f"> –õ–æ–≥–∏–Ω: {employee.login} | –†–∞–±–æ—Ç–∞–µ—Ç")
        return True
    elif not employee.isLeader:
        calendar = sauron.get_worked_employees(employee.login, date_start.date(), date_end.date())
        if sum([x["hours"] for x in calendar]) > 0:
            logging.debug(f"> –õ–æ–≥–∏–Ω: {employee.login} | –†–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            logging.debug(f"> –õ–æ–≥–∏–Ω: {employee.login} | –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False


def actualization_worked_employees_on_week(products: List[Product]) -> List[Product]:
    """
    –ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞ –Ω–µ–¥–µ–ª–µ –∏–ª–∏ –Ω–µ—Ç
    :param products: —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    :return: –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º "–†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –Ω–µ–¥–µ–ª–µ"
    """

    for product in products:
        logging.debug(f">>> –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {product.product_name} <<<")
        for employee in product.employees:
            employee.workedWeek = actualization_worked_employee_on_week(employee)

    return products


def get_only_worked_employees_on_week(products: List[Product]) -> List[Product]:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É "–†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –Ω–µ–¥–µ–ª–µ"
    :param products: —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    :return: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    """
    for product in products:
        product.employees = [employee for employee in product.employees if employee.workedWeek]

    return products
